{{!< default}}

<main class="site-main">

    {{#post}}
        {{> "content" width="wide"}}
    {{/post}}

    {{#if @custom.show_related_posts}}
        {{> "related-posts"}}
    {{/if}}

    {{#post}}
        {{> "comments"}}
    {{/post}}
{{!< default}}

<main class="site-main">

    {{#post}}
        {{> "content" width="wide"}}
    {{/post}}

    {{#if @custom.show_related_posts}}
        {{> "related-posts"}}
    {{/if}}

    {{#post}}
        {{> "comments"}}
    {{/post}}

</main>

<!-- AUTO TABLE OF CONTENTS - ADD THIS RIGHT BEFORE CLOSING </main> -->
<!-- This will only show on posts that have headers -->
<div id="auto-toc-container" class="auto-toc-sidebar">
  <div class="toc-title">Contents</div>
  <nav id="auto-toc-nav"></nav>
</div>

<style>
/* Auto Table of Contents Styles */
.auto-toc-sidebar {
  position: fixed;
  top: 20%;
  right: 20px;
  width: 280px;
  max-height: 65vh;
  overflow-y: auto;
  background: rgba(248, 246, 244, 0.98); /* Matches your --bg-color */
  backdrop-filter: blur(12px);
  border: 1px solid rgba(166, 85, 60, 0.1); /* Subtle accent color border */
  border-radius: 16px;
  padding: 20px;
  z-index: 999;
  box-shadow: 0 10px 40px rgba(0, 0, 0, 0.08);
  transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
  opacity: 0;
  transform: translateX(30px);
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
}

.auto-toc-sidebar.show {
  opacity: 1;
  transform: translateX(0);
}

.toc-title {
  font-weight: 600;
  font-size: 14px;
  color: #A6553C; /* Your accent color */
  margin-bottom: 16px;
  text-transform: uppercase;
  letter-spacing: 0.8px;
  border-bottom: 1px solid rgba(166, 85, 60, 0.2);
  padding-bottom: 8px;
}

#auto-toc-nav {
  display: flex;
  flex-direction: column;
  gap: 2px;
}

#auto-toc-nav a {
  display: block;
  color: #2a2a2a; /* Your primary text color */
  text-decoration: none;
  padding: 8px 12px;
  font-size: 14px;
  line-height: 1.4;
  border-radius: 8px;
  border-left: 3px solid transparent;
  transition: all 0.2s ease;
  position: relative;
}

#auto-toc-nav a:hover {
  color: #A6553C;
  background: rgba(166, 85, 60, 0.06);
  border-left-color: #A6553C;
  transform: translateX(2px);
}

#auto-toc-nav a.active {
  color: #A6553C;
  background: rgba(166, 85, 60, 0.1);
  border-left-color: #A6553C;
  font-weight: 500;
}

/* Hierarchy styling for different heading levels */
#auto-toc-nav a.h2 { padding-left: 12px; }
#auto-toc-nav a.h3 { padding-left: 24px; font-size: 13px; }
#auto-toc-nav a.h4 { padding-left: 36px; font-size: 12px; }
#auto-toc-nav a.h5 { padding-left: 48px; font-size: 12px; }
#auto-toc-nav a.h6 { padding-left: 60px; font-size: 11px; }

/* Responsive: Hide on tablets and mobile */
@media (max-width: 1200px) {
  .auto-toc-sidebar {
    display: none;
  }
}
</style>

<script>
(function() {
  'use strict';
  
  function initAutoTOC() {
    const tocContainer = document.getElementById('auto-toc-container');
    const tocNav = document.getElementById('auto-toc-nav');
    
    if (!tocContainer || !tocNav) return;
    
    // Ghost content selectors
    const contentSelectors = [
      '.gh-content',
      '.post-content', 
      'main article',
      '.content',
      'article .post-body',
      '.kg-width-wide', // Ghost editor blocks
      '.kg-width-full'
    ];
    
    let content = null;
    for (const selector of contentSelectors) {
      content = document.querySelector(selector);
      if (content) break;
    }
    
    if (!content) {
      // Fallback: look for any article or main content
      content = document.querySelector('article') || document.querySelector('main');
    }
    
    if (!content) {
      console.log('Auto TOC: Content area not found');
      return;
    }
    
    // Find all headings in the post content
    const headings = content.querySelectorAll('h1, h2, h3, h4, h5, h6');
    
    // If no headings found, hide TOC
    if (headings.length === 0) {
      tocContainer.style.display = 'none';
      return;
    }
    
    // Generate IDs for headings that don't have them
    const usedIds = new Set();
    headings.forEach((heading, index) => {
      if (!heading.id) {
        let baseId = heading.textContent
          .trim()
          .toLowerCase()
          .replace(/[^\w\s-]/g, '')
          .replace(/\s+/g, '-')
          .replace(/-+/g, '-')
          .replace(/^-|-$/g, '');
        
        if (!baseId) baseId = 'heading';
        
        let finalId = baseId;
        let counter = 1;
        while (usedIds.has(finalId)) {
          finalId = `${baseId}-${counter}`;
          counter++;
        }
        
        heading.id = finalId;
        usedIds.add(finalId);
      } else {
        usedIds.add(heading.id);
      }
    });
    
    // Build the TOC
    let tocHTML = '';
    headings.forEach(heading => {
      const level = heading.tagName.toLowerCase();
      const text = heading.textContent.trim();
      const id = heading.id;
      
      tocHTML += `<a href="#${id}" class="toc-link ${level}" data-target="${id}">${text}</a>`;
    });
    
    tocNav.innerHTML = tocHTML;
    
    // Show TOC with animation
    setTimeout(() => {
      tocContainer.classList.add('show');
    }, 800);
    
    // Add smooth scrolling
    tocNav.addEventListener('click', function(e) {
      const link = e.target.closest('.toc-link');
      if (link) {
        e.preventDefault();
        const targetId = link.getAttribute('data-target');
        const targetElement = document.getElementById(targetId);
        
        if (targetElement) {
          const offset = 80;
          const elementPosition = targetElement.getBoundingClientRect().top;
          const offsetPosition = elementPosition + window.pageYOffset - offset;
          
          window.scrollTo({
            top: offsetPosition,
            behavior: 'smooth'
          });
        }
      }
    });
    
    // Scroll spy to highlight current section
    function updateActiveLink() {
      const scrollPosition = window.scrollY + 120;
      let activeHeading = null;
      
      for (let i = headings.length - 1; i >= 0; i--) {
        const heading = headings[i];
        if (heading.getBoundingClientRect().top + window.scrollY <= scrollPosition) {
          activeHeading = heading;
          break;
        }
      }
      
      const tocLinks = tocNav.querySelectorAll('.toc-link');
      tocLinks.forEach(link => {
        link.classList.remove('active');
        if (activeHeading && link.getAttribute('data-target') === activeHeading.id) {
          link.classList.add('active');
        }
      });
    }
    
    let scrollTimeout;
    function handleScroll() {
      if (scrollTimeout) {
        cancelAnimationFrame(scrollTimeout);
      }
      scrollTimeout = requestAnimationFrame(updateActiveLink);
    }
    
    window.addEventListener('scroll', handleScroll, { passive: true });
    setTimeout(updateActiveLink, 100);
  }
  
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initAutoTOC);
  } else {
    initAutoTOC();
  }
})();
</script>

</main>